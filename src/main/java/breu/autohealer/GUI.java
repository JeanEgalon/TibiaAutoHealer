package breu.autohealer;

import java.awt.Color;
import java.awt.Component;
import java.awt.MouseInfo;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.util.Random;
import javax.swing.JOptionPane;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;

public class GUI extends javax.swing.JFrame {

    static Coordinate heal1Hotkey;
    static Coordinate heal2Hotkey;
    static Coordinate heal3Hotkey;

    static Coordinate hpHotkey;
    static Coordinate mpHotkey;

    static Coordinate ammoHotkey;
    static Coordinate ringHotkey;
    static Coordinate amuletHotkey;

    static Coordinate heal1Bar;
    static Coordinate heal2Bar;
    static Coordinate heal3Bar;

    static Coordinate hpPotBar;
    static Coordinate mpPotBar;

    static Coordinate ammoPosition;
    static Coordinate ringPosition;
    static Coordinate amuletPosition;

    static Color heal1Color;
    static Color heal2Color;
    static Color heal3Color;

    static Color hpPotionColor;
    static Color mpPotionColor;

    static Color ammoColor;
    static Color ringColor;
    static Color amuletColor;

    static Robot robot;

    Component k;

    static boolean running = false;

    public GUI() {
        try {
            robot = new Robot();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(k, "Failed to initialize java robot.");
        }
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setHotkeyHeal1 = new javax.swing.JButton();
        setHotkeyHeal2 = new javax.swing.JButton();
        setHotkeyHeal3 = new javax.swing.JButton();
        setHotkeyHpPotion = new javax.swing.JButton();
        setHotkeyMpPotion = new javax.swing.JButton();
        startActions = new javax.swing.JButton();
        useHeal1 = new javax.swing.JCheckBox();
        useHeal2 = new javax.swing.JCheckBox();
        useHeal3 = new javax.swing.JCheckBox();
        useHpPotion = new javax.swing.JCheckBox();
        useMpPotion = new javax.swing.JCheckBox();
        stopActions = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        setPositionHeal1 = new javax.swing.JButton();
        setPositionHeal2 = new javax.swing.JButton();
        setPositionHeal3 = new javax.swing.JButton();
        setPositionHpPotion = new javax.swing.JButton();
        setPositionMpPotion = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timeInterval = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        resetAll = new javax.swing.JButton();
        heal1BARCoordinate = new javax.swing.JLabel();
        heal2BARCoordinate = new javax.swing.JLabel();
        heal3BARCoordinate = new javax.swing.JLabel();
        hpBARCoordinate = new javax.swing.JLabel();
        mpBARCoordinate = new javax.swing.JLabel();
        heal1HKCoordinate = new javax.swing.JLabel();
        heal2HKCoordinate = new javax.swing.JLabel();
        heal3HKCoordinate = new javax.swing.JLabel();
        hpHKCoordinate = new javax.swing.JLabel();
        mpHKCoordinate = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        useAmmo = new javax.swing.JCheckBox();
        useRing = new javax.swing.JCheckBox();
        setHotkeyAmmo = new javax.swing.JButton();
        setHotkeyRing = new javax.swing.JButton();
        useAmulet = new javax.swing.JCheckBox();
        setHotkeyAmulet = new javax.swing.JButton();
        ammoHKCoordinate = new javax.swing.JLabel();
        ringHKCoordinate = new javax.swing.JLabel();
        amuletHKCoordinate = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        setPositionAmmo = new javax.swing.JButton();
        setPositionRing = new javax.swing.JButton();
        setPositionAmulet = new javax.swing.JButton();
        ammoCoordinate = new javax.swing.JLabel();
        ringCoordinate = new javax.swing.JLabel();
        amuletCoordinate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tibia Auto Healer: Java Robot / Carlo Moro");
        setResizable(false);

        setHotkeyHeal1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyHeal1.setText("Set Hotkey");
        setHotkeyHeal1.setEnabled(false);
        setHotkeyHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyHeal1ActionPerformed(evt);
            }
        });

        setHotkeyHeal2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyHeal2.setText("Set Hotkey");
        setHotkeyHeal2.setEnabled(false);
        setHotkeyHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyHeal2ActionPerformed(evt);
            }
        });

        setHotkeyHeal3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyHeal3.setText("Set Hotkey");
        setHotkeyHeal3.setEnabled(false);
        setHotkeyHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyHeal3ActionPerformed(evt);
            }
        });

        setHotkeyHpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyHpPotion.setText("Set Hotkey");
        setHotkeyHpPotion.setEnabled(false);
        setHotkeyHpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyHpPotionActionPerformed(evt);
            }
        });

        setHotkeyMpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyMpPotion.setText("Set Hotkey");
        setHotkeyMpPotion.setEnabled(false);
        setHotkeyMpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyMpPotionActionPerformed(evt);
            }
        });

        startActions.setBackground(new java.awt.Color(0, 153, 0));
        startActions.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        startActions.setForeground(new java.awt.Color(255, 255, 255));
        startActions.setText("Go");
        startActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionsActionPerformed(evt);
            }
        });

        useHeal1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal1.setText("Use Weak Heal");
        useHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal1ActionPerformed(evt);
            }
        });

        useHeal2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal2.setText("Use Medium Heal");
        useHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal2ActionPerformed(evt);
            }
        });

        useHeal3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHeal3.setText("Use Strong Heal");
        useHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHeal3ActionPerformed(evt);
            }
        });

        useHpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useHpPotion.setText("Use HP Potion");
        useHpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useHpPotionActionPerformed(evt);
            }
        });

        useMpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useMpPotion.setText("Use MP Potion");
        useMpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useMpPotionActionPerformed(evt);
            }
        });

        stopActions.setBackground(new java.awt.Color(255, 0, 0));
        stopActions.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        stopActions.setForeground(new java.awt.Color(255, 255, 255));
        stopActions.setText("Stop");
        stopActions.setEnabled(false);
        stopActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText("at");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("at");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("at");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("at");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("at");

        setPositionHeal1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal1.setText("Set HP Bar Position");
        setPositionHeal1.setToolTipText("");
        setPositionHeal1.setEnabled(false);
        setPositionHeal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal1ActionPerformed(evt);
            }
        });

        setPositionHeal2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal2.setText("Set HP Bar Position");
        setPositionHeal2.setEnabled(false);
        setPositionHeal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal2ActionPerformed(evt);
            }
        });

        setPositionHeal3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHeal3.setText("Set HP Bar Position");
        setPositionHeal3.setEnabled(false);
        setPositionHeal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHeal3ActionPerformed(evt);
            }
        });

        setPositionHpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionHpPotion.setText("Set HP Bar Position");
        setPositionHpPotion.setEnabled(false);
        setPositionHpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionHpPotionActionPerformed(evt);
            }
        });

        setPositionMpPotion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionMpPotion.setText("Set MP Bar Position");
        setPositionMpPotion.setEnabled(false);
        setPositionMpPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionMpPotionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("Check every");

        timeInterval.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        timeInterval.setText("1000");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("ms");
        jLabel7.setToolTipText("");

        resetAll.setBackground(new java.awt.Color(255, 153, 51));
        resetAll.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resetAll.setForeground(new java.awt.Color(255, 255, 255));
        resetAll.setText("Reset All");
        resetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllActionPerformed(evt);
            }
        });

        heal1BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal1BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal1BARCoordinate.setText("[x, y]");

        heal2BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal2BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal2BARCoordinate.setText("[x, y]");

        heal3BARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal3BARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal3BARCoordinate.setText("[x, y]");

        hpBARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        hpBARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hpBARCoordinate.setText("[x, y]");

        mpBARCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        mpBARCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mpBARCoordinate.setText("[x, y]");

        heal1HKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal1HKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal1HKCoordinate.setText("[x, y]");

        heal2HKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal2HKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal2HKCoordinate.setText("[x, y]");

        heal3HKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        heal3HKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heal3HKCoordinate.setText("[x, y]");

        hpHKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        hpHKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hpHKCoordinate.setText("[x, y]");

        mpHKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        mpHKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mpHKCoordinate.setText("[x, y]");

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("Status: Stopped");

        useAmmo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useAmmo.setText("Refill Ammo");
        useAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAmmoActionPerformed(evt);
            }
        });

        useRing.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useRing.setText("Refill Ring");
        useRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRingActionPerformed(evt);
            }
        });

        setHotkeyAmmo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyAmmo.setText("Set Hotkey");
        setHotkeyAmmo.setEnabled(false);
        setHotkeyAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyAmmoActionPerformed(evt);
            }
        });

        setHotkeyRing.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyRing.setText("Set Hotkey");
        setHotkeyRing.setEnabled(false);
        setHotkeyRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyRingActionPerformed(evt);
            }
        });

        useAmulet.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        useAmulet.setText("Refill Amulet");
        useAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useAmuletActionPerformed(evt);
            }
        });

        setHotkeyAmulet.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setHotkeyAmulet.setText("Set Hotkey");
        setHotkeyAmulet.setEnabled(false);
        setHotkeyAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHotkeyAmuletActionPerformed(evt);
            }
        });

        ammoHKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ammoHKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ammoHKCoordinate.setText("[x, y]");

        ringHKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ringHKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ringHKCoordinate.setText("[x, y]");

        amuletHKCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        amuletHKCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amuletHKCoordinate.setText("[x, y]");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel8.setText("at");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel9.setText("at");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("at");

        setPositionAmmo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionAmmo.setText("Set Ammo Position");
        setPositionAmmo.setEnabled(false);
        setPositionAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionAmmoActionPerformed(evt);
            }
        });

        setPositionRing.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionRing.setText("Set Ring Position");
        setPositionRing.setEnabled(false);
        setPositionRing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionRingActionPerformed(evt);
            }
        });

        setPositionAmulet.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setPositionAmulet.setText("Set Amulet Position");
        setPositionAmulet.setEnabled(false);
        setPositionAmulet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPositionAmuletActionPerformed(evt);
            }
        });

        ammoCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ammoCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ammoCoordinate.setText("[x, y]");

        ringCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ringCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ringCoordinate.setText("[x, y]");

        amuletCoordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        amuletCoordinate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amuletCoordinate.setText("[x, y]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(useHeal1)
                                    .addComponent(useHeal3)
                                    .addComponent(useHpPotion)
                                    .addComponent(useMpPotion)
                                    .addComponent(useHeal2)
                                    .addComponent(useAmmo)
                                    .addComponent(useRing)
                                    .addComponent(useAmulet))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(setHotkeyAmulet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(amuletHKCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(setHotkeyRing)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ringHKCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(setHotkeyHeal1)
                                            .addComponent(setHotkeyHeal2)
                                            .addComponent(setHotkeyHeal3)
                                            .addComponent(setHotkeyHpPotion)
                                            .addComponent(setHotkeyMpPotion)
                                            .addComponent(setHotkeyAmmo))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(ammoHKCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(heal1HKCoordinate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                            .addComponent(heal2HKCoordinate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(heal3HKCoordinate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(hpHKCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(mpHKCoordinate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setPositionHeal1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setPositionHeal2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setPositionHeal3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setPositionHpPotion, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(setPositionMpPotion, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(hpBARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                                            .addComponent(mpBARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(heal3BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(heal2BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(heal1BARCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(setPositionAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ammoCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(setPositionRing, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ringCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(setPositionAmulet, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(amuletCoordinate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetAll)
                                .addGap(18, 18, 18)
                                .addComponent(stopActions)
                                .addGap(18, 18, 18)
                                .addComponent(startActions)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal1)
                    .addComponent(setHotkeyHeal1)
                    .addComponent(jLabel1)
                    .addComponent(setPositionHeal1)
                    .addComponent(heal1BARCoordinate)
                    .addComponent(heal1HKCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal2)
                    .addComponent(setHotkeyHeal2)
                    .addComponent(jLabel2)
                    .addComponent(setPositionHeal2)
                    .addComponent(heal2BARCoordinate)
                    .addComponent(heal2HKCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHeal3)
                    .addComponent(setHotkeyHeal3)
                    .addComponent(jLabel3)
                    .addComponent(setPositionHeal3)
                    .addComponent(heal3BARCoordinate)
                    .addComponent(heal3HKCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useHpPotion)
                    .addComponent(setHotkeyHpPotion)
                    .addComponent(jLabel4)
                    .addComponent(setPositionHpPotion)
                    .addComponent(hpBARCoordinate)
                    .addComponent(hpHKCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useMpPotion)
                    .addComponent(setHotkeyMpPotion)
                    .addComponent(jLabel5)
                    .addComponent(setPositionMpPotion)
                    .addComponent(mpBARCoordinate)
                    .addComponent(mpHKCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useAmmo)
                    .addComponent(setHotkeyAmmo)
                    .addComponent(ammoHKCoordinate)
                    .addComponent(jLabel8)
                    .addComponent(setPositionAmmo)
                    .addComponent(ammoCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useRing)
                    .addComponent(setHotkeyRing)
                    .addComponent(ringHKCoordinate)
                    .addComponent(jLabel9)
                    .addComponent(setPositionRing)
                    .addComponent(ringCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useAmulet)
                    .addComponent(setHotkeyAmulet)
                    .addComponent(amuletHKCoordinate)
                    .addComponent(jLabel10)
                    .addComponent(setPositionAmulet)
                    .addComponent(amuletCoordinate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(timeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetAll)
                    .addComponent(stopActions)
                    .addComponent(startActions)
                    .addComponent(statusLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setHotkeyHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyHeal1ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for weak healing spell and press enter.");

        heal1Hotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal1HKCoordinate.setText("[" + heal1Hotkey.getX() + ", " + heal1Hotkey.getY() + "]");

        setPositionHeal1.setEnabled(true);
    }//GEN-LAST:event_setHotkeyHeal1ActionPerformed

    private void setHotkeyHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyHeal2ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for medium healing spell and press enter.");

        heal2Hotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal2HKCoordinate.setText("[" + heal2Hotkey.getX() + ", " + heal2Hotkey.getY() + "]");

        setPositionHeal2.setEnabled(true);
    }//GEN-LAST:event_setHotkeyHeal2ActionPerformed

    private void setHotkeyHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyHeal3ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for strong healing spell and press enter.");

        heal3Hotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal3HKCoordinate.setText("[" + heal3Hotkey.getX() + ", " + heal3Hotkey.getY() + "]");

        setPositionHeal3.setEnabled(true);
    }//GEN-LAST:event_setHotkeyHeal3ActionPerformed

    private void setHotkeyHpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyHpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for healing potion and press enter.");

        hpHotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        hpHKCoordinate.setText("[" + hpHotkey.getX() + ", " + hpHotkey.getY() + "]");

        setPositionHpPotion.setEnabled(true);
    }//GEN-LAST:event_setHotkeyHpPotionActionPerformed

    private void setHotkeyMpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyMpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for mana potion and press enter.");

        mpHotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        mpHKCoordinate.setText("[" + mpHotkey.getX() + ", " + mpHotkey.getY() + "]");

        setPositionMpPotion.setEnabled(true);
    }//GEN-LAST:event_setHotkeyMpPotionActionPerformed

    private void useHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal1ActionPerformed
        if (useHeal1.isSelected()) {
            setHotkeyHeal1.setEnabled(true);
        } else {
            setHotkeyHeal1.setEnabled(false);
        }
    }//GEN-LAST:event_useHeal1ActionPerformed

    private void setPositionHeal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal1ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use weak healing spell and press enter.");

        heal1Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal1BARCoordinate.setText("[" + heal1Bar.getX() + ", " + heal1Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal1Color = robot.getPixelColor(heal1Bar.getX(), heal1Bar.getY());
    }//GEN-LAST:event_setPositionHeal1ActionPerformed

    private void setPositionHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal2ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use medium healing spell and press enter.");

        heal2Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal2BARCoordinate.setText("[" + heal2Bar.getX() + ", " + heal2Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal2Color = robot.getPixelColor(heal2Bar.getX(), heal2Bar.getY());
    }//GEN-LAST:event_setPositionHeal2ActionPerformed

    private void setPositionHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHeal3ActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use strong healing spell and press enter.");

        heal3Bar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        heal3BARCoordinate.setText("[" + heal3Bar.getX() + ", " + heal3Bar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        heal3Color = robot.getPixelColor(heal3Bar.getX(), heal3Bar.getY());
    }//GEN-LAST:event_setPositionHeal3ActionPerformed

    private void setPositionHpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionHpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hp bar position to use healing potion and press enter.");

        hpPotBar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        hpBARCoordinate.setText("[" + hpPotBar.getX() + ", " + hpPotBar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        hpPotionColor = robot.getPixelColor(hpPotBar.getX(), hpPotBar.getY());
    }//GEN-LAST:event_setPositionHpPotionActionPerformed

    private void setPositionMpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionMpPotionActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of mp bar position to use mana potion and press enter.");

        mpPotBar = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        mpBARCoordinate.setText("[" + mpPotBar.getX() + ", " + mpPotBar.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        mpPotionColor = robot.getPixelColor(mpPotBar.getX(), mpPotBar.getY());
    }//GEN-LAST:event_setPositionMpPotionActionPerformed

    private void useHeal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal2ActionPerformed
        if (useHeal2.isSelected()) {
            setHotkeyHeal2.setEnabled(true);
        } else {
            setHotkeyHeal2.setEnabled(false);
        }
    }//GEN-LAST:event_useHeal2ActionPerformed

    private void useHeal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHeal3ActionPerformed
        if (useHeal3.isSelected()) {
            setHotkeyHeal3.setEnabled(true);
        } else {
            setHotkeyHeal3.setEnabled(false);
        }
    }//GEN-LAST:event_useHeal3ActionPerformed

    private void useHpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useHpPotionActionPerformed
        if (useHpPotion.isSelected()) {
            setHotkeyHpPotion.setEnabled(true);
        } else {
            setHotkeyHpPotion.setEnabled(false);
        }
    }//GEN-LAST:event_useHpPotionActionPerformed

    private void useMpPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useMpPotionActionPerformed
        if (useMpPotion.isSelected()) {
            setHotkeyMpPotion.setEnabled(true);
        } else {
            setHotkeyMpPotion.setEnabled(false);
        }
    }//GEN-LAST:event_useMpPotionActionPerformed

    private void resetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllActionPerformed
        resetAll();
    }//GEN-LAST:event_resetAllActionPerformed

    private void stopActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionsActionPerformed
        stopRunning();
    }//GEN-LAST:event_stopActionsActionPerformed

    private void startActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionsActionPerformed
        startRunning();
    }//GEN-LAST:event_startActionsActionPerformed

    private void setPositionAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionAmmoActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty ammo position to refill and press enter.");

        ammoPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ammoCoordinate.setText("[" + ammoPosition.getX() + ", " + ammoPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        ammoColor = robot.getPixelColor(ammoPosition.getX(), ammoPosition.getY());
    }//GEN-LAST:event_setPositionAmmoActionPerformed

    private void setPositionRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionRingActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty ring position to refill and press enter.");

        ringPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ringCoordinate.setText("[" + ringPosition.getX() + ", " + ringPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        ringColor = robot.getPixelColor(ringPosition.getX(), ringPosition.getY());
    }//GEN-LAST:event_setPositionRingActionPerformed

    private void setPositionAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPositionAmuletActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of empty amulet position to refill and press enter.");

        amuletPosition = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        amuletCoordinate.setText("[" + amuletPosition.getX() + ", " + amuletPosition.getY() + "]");

        JOptionPane.showMessageDialog(k, "Move mouse away and press enter.");
        amuletColor = robot.getPixelColor(amuletPosition.getX(), amuletPosition.getY());
    }//GEN-LAST:event_setPositionAmuletActionPerformed

    private void useAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAmmoActionPerformed
        if (useAmmo.isSelected()) {
            setHotkeyAmmo.setEnabled(true);
        } else {
            setHotkeyAmmo.setEnabled(false);
        }
    }//GEN-LAST:event_useAmmoActionPerformed

    private void useRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRingActionPerformed
        if (useRing.isSelected()) {
            setHotkeyRing.setEnabled(true);
        } else {
            setHotkeyRing.setEnabled(false);
        }
    }//GEN-LAST:event_useRingActionPerformed

    private void useAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAmuletActionPerformed
        if (useAmulet.isSelected()) {
            setHotkeyAmulet.setEnabled(true);
        } else {
            setHotkeyAmulet.setEnabled(false);
        }
    }//GEN-LAST:event_useAmuletActionPerformed

    private void setHotkeyAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyAmmoActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for ammo and press enter.");

        ammoHotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ammoHKCoordinate.setText("[" + ammoHotkey.getX() + ", " + ammoHotkey.getY() + "]");

        setPositionAmmo.setEnabled(true);
    }//GEN-LAST:event_setHotkeyAmmoActionPerformed

    private void setHotkeyRingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyRingActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for ring and press enter.");

        ringHotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        ringHKCoordinate.setText("[" + ringHotkey.getX() + ", " + ringHotkey.getY() + "]");

        setPositionRing.setEnabled(true);
    }//GEN-LAST:event_setHotkeyRingActionPerformed

    private void setHotkeyAmuletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHotkeyAmuletActionPerformed
        JOptionPane.showMessageDialog(k, "Move mouse on top of hotkey for amulet and press enter.");

        amuletHotkey = new Coordinate(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        amuletHKCoordinate.setText("[" + amuletHotkey.getX() + ", " + amuletHotkey.getY() + "]");

        setPositionAmulet.setEnabled(true);
    }//GEN-LAST:event_setHotkeyAmuletActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    public void startRunning() {
        running = true;
        stopActions.setEnabled(true);
        startActions.setEnabled(false);
        statusLabel.setText("Status: Running");

        new healerThread().start();
        new keyboardInspectorThread().start();
    }

    public static void stopRunning() {
        running = false;
        stopActions.setEnabled(false);
        startActions.setEnabled(true);
        statusLabel.setText("Status: Stopped");
    }

    static class keyboardInspectorThread extends Thread {

        private static volatile boolean pausePressed = false;

        public keyboardInspectorThread() {
        }

        public boolean isPausePressed() {
            synchronized (keyboardInspectorThread.class) {
                return pausePressed;
            }
        }

        public void run() {
            KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {

                @Override
                public boolean dispatchKeyEvent(KeyEvent ke) {
                    synchronized (keyboardInspectorThread.class) {
                        switch (ke.getID()) {
                            case KeyEvent.KEY_PRESSED:
                                if (ke.getKeyCode() == KeyEvent.VK_PAUSE) {
                                    pausePressed = true;
                                    stopRunning();
                                }
                                break;
                        }
                        return false;
                    }
                }
            });
        }
    }

    static class healerThread extends Thread {
        int minMs = 80;
        int maxMs = 200;

        int minimumInterval = 450;
        int maximumInterval = 678;

        public healerThread() {
        }

        public int getRandomMilisecondsInRange(int min, int max) {
            return (min + new Random().nextInt(max - min + 1));
        }

        public void smoothMouse(int xDestino, int yDestino) {
            robot.setAutoDelay(0);
            while (((MouseInfo.getPointerInfo().getLocation().x != xDestino) || ((MouseInfo.getPointerInfo().getLocation().y != yDestino))) && running) {
                robot.delay(getRandomMilisecondsInRange(1, 4));
                if ((MouseInfo.getPointerInfo().getLocation().x > xDestino) && ((MouseInfo.getPointerInfo().getLocation().y > yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x - 1, MouseInfo.getPointerInfo().getLocation().y - 1);

                } else if ((MouseInfo.getPointerInfo().getLocation().x < xDestino) && ((MouseInfo.getPointerInfo().getLocation().y < yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x + 1, MouseInfo.getPointerInfo().getLocation().y + 1);
                } else if ((MouseInfo.getPointerInfo().getLocation().x > xDestino) && ((MouseInfo.getPointerInfo().getLocation().y < yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x - 1, MouseInfo.getPointerInfo().getLocation().y + 1);
                } else if ((MouseInfo.getPointerInfo().getLocation().x < xDestino) && ((MouseInfo.getPointerInfo().getLocation().y > yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x + 1, MouseInfo.getPointerInfo().getLocation().y - 1);

                } else if ((MouseInfo.getPointerInfo().getLocation().x < xDestino) && ((MouseInfo.getPointerInfo().getLocation().y == yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x + 1, MouseInfo.getPointerInfo().getLocation().y);
                } else if ((MouseInfo.getPointerInfo().getLocation().x > xDestino) && ((MouseInfo.getPointerInfo().getLocation().y == yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x - 1, MouseInfo.getPointerInfo().getLocation().y);
                } else if ((MouseInfo.getPointerInfo().getLocation().x == xDestino) && ((MouseInfo.getPointerInfo().getLocation().y < yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y + 1);
                } else if ((MouseInfo.getPointerInfo().getLocation().x == xDestino) && ((MouseInfo.getPointerInfo().getLocation().y > yDestino))) {
                    robot.mouseMove(MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y - 1);
                }
            }
            robot.setAutoDelay(3);
        }

        public void actuate(int x, int y) {
            smoothMouse(x, y);
            robot.delay(getRandomMilisecondsInRange(minMs, maxMs));
            robot.mousePress(InputEvent.BUTTON1_MASK);
            robot.mouseRelease(InputEvent.BUTTON1_MASK);
        }

        public void run() {
            while (running) {
                try {
                    if (useHpPotion.isSelected() && hpPotBar != null && hpHotkey != null && hpPotionColor != null) {
                        if (robot.getPixelColor(hpPotBar.getX(), hpPotBar.getY()).getRGB() != hpPotionColor.getRGB()) {
                            actuate(hpHotkey.getX(), hpHotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useMpPotion.isSelected() && mpPotBar != null && mpHotkey != null && mpPotionColor != null) {
                        if (robot.getPixelColor(mpPotBar.getX(), mpPotBar.getY()).getRGB() != mpPotionColor.getRGB()) {
                            actuate(mpHotkey.getX(), mpHotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useHeal3.isSelected() && heal3Bar != null && heal3Hotkey != null && heal3Color != null) {
                        if (robot.getPixelColor(heal3Bar.getX(), heal3Bar.getY()).getRGB() != heal3Color.getRGB()) {
                            actuate(heal3Hotkey.getX(), heal3Hotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useHeal2.isSelected() && heal2Bar != null && heal2Hotkey != null && heal2Color != null) {
                        if (robot.getPixelColor(heal2Bar.getX(), heal2Bar.getY()).getRGB() != heal2Color.getRGB()) {
                            actuate(heal2Hotkey.getX(), heal2Hotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useHeal1.isSelected() && heal1Bar != null && heal1Hotkey != null && heal1Color != null) {
                        if (robot.getPixelColor(heal1Bar.getX(), heal1Bar.getY()).getRGB() != heal1Color.getRGB()) {
                            actuate(heal1Hotkey.getX(), heal1Hotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useAmmo.isSelected() && ammoPosition != null && ammoHotkey != null && ammoColor != null) {
                        if (robot.getPixelColor(ammoPosition.getX(), ammoPosition.getY()).getRGB() == ammoColor.getRGB()) {
                            actuate(ammoHotkey.getX(), ammoHotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useRing.isSelected() && ringPosition != null && ringHotkey != null && ringColor != null) {
                        if (robot.getPixelColor(ringPosition.getX(), ringPosition.getY()).getRGB() == ringColor.getRGB()) {
                            actuate(ringHotkey.getX(), ringHotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    if (useAmulet.isSelected() && amuletPosition != null && amuletHotkey != null && amuletColor != null) {
                        if (robot.getPixelColor(amuletPosition.getX(), amuletPosition.getY()).getRGB() == amuletColor.getRGB()) {
                            actuate(amuletHotkey.getX(), amuletHotkey.getY());

                            Thread.sleep(getRandomMilisecondsInRange(minimumInterval, maximumInterval));
                        }
                    }

                    Thread.sleep(Integer.parseInt(timeInterval.getText()));
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }

    public void resetAll() {
        stopRunning();

        heal1Hotkey = new Coordinate();
        heal2Hotkey = new Coordinate();
        heal3Hotkey = new Coordinate();

        hpHotkey = new Coordinate();
        mpHotkey = new Coordinate();

        ammoHotkey = new Coordinate();
        ringHotkey = new Coordinate();
        amuletHotkey = new Coordinate();

        heal1Bar = new Coordinate();
        heal2Bar = new Coordinate();
        heal3Bar = new Coordinate();

        hpPotBar = new Coordinate();
        mpPotBar = new Coordinate();

        ammoPosition = new Coordinate();
        ringPosition = new Coordinate();
        amuletPosition = new Coordinate();

        heal1HKCoordinate.setText("[x, y]");
        heal2HKCoordinate.setText("[x, y]");
        heal3HKCoordinate.setText("[x, y]");

        hpHKCoordinate.setText("[x, y]");
        mpHKCoordinate.setText("[x, y]");

        ammoHKCoordinate.setText("[x, y]");
        ringHKCoordinate.setText("[x, y]");
        amuletHKCoordinate.setText("[x, y]");

        heal1BARCoordinate.setText("[x, y]");
        heal2BARCoordinate.setText("[x, y]");
        heal3BARCoordinate.setText("[x, y]");

        hpBARCoordinate.setText("[x, y]");
        mpBARCoordinate.setText("[x, y]");

        ammoCoordinate.setText("[x, y]");
        ringCoordinate.setText("[x, y]");
        amuletCoordinate.setText("[x, y]");

        timeInterval.setText("1000");

        useHeal1.setSelected(false);
        useHeal2.setSelected(false);
        useHeal3.setSelected(false);

        useHpPotion.setSelected(false);
        useMpPotion.setSelected(false);

        useAmmo.setSelected(false);
        useRing.setSelected(false);
        useAmulet.setSelected(false);

        setHotkeyHeal1.setEnabled(false);
        setHotkeyHeal2.setEnabled(false);
        setHotkeyHeal3.setEnabled(false);

        setHotkeyHpPotion.setEnabled(false);
        setHotkeyMpPotion.setEnabled(false);

        setHotkeyAmmo.setEnabled(false);
        setHotkeyRing.setEnabled(false);
        setHotkeyAmulet.setEnabled(false);

        setPositionHeal1.setEnabled(false);
        setPositionHeal2.setEnabled(false);
        setPositionHeal3.setEnabled(false);

        setPositionHpPotion.setEnabled(false);
        setPositionMpPotion.setEnabled(false);

        setPositionAmmo.setEnabled(false);
        setPositionRing.setEnabled(false);
        setPositionAmulet.setEnabled(false);

        stopActions.setEnabled(false);
        startActions.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ammoCoordinate;
    private javax.swing.JLabel ammoHKCoordinate;
    private javax.swing.JLabel amuletCoordinate;
    private javax.swing.JLabel amuletHKCoordinate;
    private javax.swing.JLabel heal1BARCoordinate;
    private javax.swing.JLabel heal1HKCoordinate;
    private javax.swing.JLabel heal2BARCoordinate;
    private javax.swing.JLabel heal2HKCoordinate;
    private javax.swing.JLabel heal3BARCoordinate;
    private javax.swing.JLabel heal3HKCoordinate;
    private javax.swing.JLabel hpBARCoordinate;
    private javax.swing.JLabel hpHKCoordinate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel mpBARCoordinate;
    private javax.swing.JLabel mpHKCoordinate;
    private javax.swing.JButton resetAll;
    private javax.swing.JLabel ringCoordinate;
    private javax.swing.JLabel ringHKCoordinate;
    private javax.swing.JButton setHotkeyAmmo;
    public static javax.swing.JButton setHotkeyAmulet;
    private javax.swing.JButton setHotkeyHeal1;
    private javax.swing.JButton setHotkeyHeal2;
    private javax.swing.JButton setHotkeyHeal3;
    private javax.swing.JButton setHotkeyHpPotion;
    private javax.swing.JButton setHotkeyMpPotion;
    public static javax.swing.JButton setHotkeyRing;
    private javax.swing.JButton setPositionAmmo;
    private javax.swing.JButton setPositionAmulet;
    private javax.swing.JButton setPositionHeal1;
    private javax.swing.JButton setPositionHeal2;
    private javax.swing.JButton setPositionHeal3;
    private javax.swing.JButton setPositionHpPotion;
    private javax.swing.JButton setPositionMpPotion;
    private javax.swing.JButton setPositionRing;
    public static javax.swing.JButton startActions;
    public static javax.swing.JLabel statusLabel;
    public static javax.swing.JButton stopActions;
    public static javax.swing.JTextField timeInterval;
    public static javax.swing.JCheckBox useAmmo;
    public static javax.swing.JCheckBox useAmulet;
    public static javax.swing.JCheckBox useHeal1;
    public static javax.swing.JCheckBox useHeal2;
    public static javax.swing.JCheckBox useHeal3;
    public static javax.swing.JCheckBox useHpPotion;
    public static javax.swing.JCheckBox useMpPotion;
    public static javax.swing.JCheckBox useRing;
    // End of variables declaration//GEN-END:variables
}
